(()=>{"use strict";var __webpack_modules__={653:(__unused_webpack_module,exports,__webpack_require__)=>{eval("\n/**\n * gameboard.ts\n *\n * Module for implementing rendering and maintaining state of the gameboard.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.allValidMoves = exports.drawBoard = exports._ = exports.X = exports.O = exports.Player = exports.Space = void 0;\nconst util_1 = __webpack_require__(882);\nconst boardCanvas = document.getElementById('board-canvas');\n/*************\n * CONSTANTS\n *************/\nconst LOCAL_MAN_COLOR = 'black';\nconst LOCAL_KING_COLOR = 'grey';\nconst REMOTE_MAN_COLOR = 'red';\nconst REMOTE_KING_COLOR = 'pink';\nconst DARK_SPACE_COLOR = '#8db596';\nconst LIGHT_SPACE_COLOR = '#bedbbb';\nconst PIECE_SELECTION_BORDER_COLOR = 'red';\nconst FREE_SPACE_SELECTION_BORDER_COLOR = 'blue';\nconst SELECTION_BORDER_WIDTH = 2;\nconst SIDE_LEN = boardCanvas.width / 8;\n/** Enumeration of values that can occupy a space on the board. */\nvar Space;\n(function (Space) {\n    /** A free space */\n    Space[Space[\"FREE\"] = 0] = \"FREE\";\n    /** Local player's man */\n    Space[Space[\"LOCAL_MAN\"] = 1] = \"LOCAL_MAN\";\n    /** Remote player's man */\n    Space[Space[\"REMOTE_MAN\"] = 2] = \"REMOTE_MAN\";\n    /** Local player's king */\n    Space[Space[\"LOCAL_KING\"] = 3] = \"LOCAL_KING\";\n    /** Remote player's king */\n    Space[Space[\"REMOTE_KING\"] = 4] = \"REMOTE_KING\";\n})(Space = exports.Space || (exports.Space = {}));\nvar Player;\n(function (Player) {\n    Player[Player[\"REMOTE\"] = 1] = \"REMOTE\";\n    Player[Player[\"LOCAL\"] = 2] = \"LOCAL\";\n})(Player = exports.Player || (exports.Player = {}));\n/************************\n * STATE INITIALIZATION\n ************************/\nexports.O = Space.LOCAL_MAN;\nexports.X = Space.REMOTE_MAN;\nexports._ = Space.FREE;\n/** Board state */\nconst board = [\n    [exports._, exports.X, exports._, exports.X, exports._, exports.X, exports._, exports.X],\n    [exports.X, exports._, exports.X, exports._, exports.X, exports._, exports.X, exports._],\n    [exports._, exports.X, exports._, exports.X, exports._, exports.X, exports._, exports.X],\n    [exports._, exports._, exports._, exports._, exports._, exports._, exports._, exports._],\n    [exports._, exports._, exports._, exports._, exports._, exports._, exports._, exports._],\n    [exports.O, exports._, exports.O, exports._, exports.O, exports._, exports.O, exports._],\n    [exports._, exports.O, exports._, exports.O, exports._, exports.O, exports._, exports.O],\n    [exports.O, exports._, exports.O, exports._, exports.O, exports._, exports.O, exports._],\n];\n/** Graphics context */\nconst _g = boardCanvas.getContext('2d');\nif (!_g)\n    throw new Error('Failed to load graphics 2D context for board canvas');\nconst g = _g;\n/** List of valid moves for currently selected piece. */\nlet validMoves = null;\n/** Current turn player. */\nlet turnPlayer = Player.LOCAL;\n/** Current selected space on the board. */\nlet selectedSpace = null;\n/** True if the player can make another move. Only the piece that moved can move again */\nlet goAgain = false;\n/***************\n * FUNCTIONS\n ***************/\n/** Set the state of a space on the board. */\nfunction set(i, v) {\n    board[i.row][i.col] = v;\n}\n/** Get the stat of a space on the board */\nfunction get(i) {\n    return board[i.row][i.col];\n}\nfunction isLocalPiece(space) {\n    return isLocalMan(space) || isLocalKing(space);\n}\nfunction isLocalMan(space) {\n    return isSpaceInsideBoard(space) && board[space.row][space.col] === Space.LOCAL_MAN;\n}\nfunction isLocalKing(space) {\n    return isSpaceInsideBoard(space) && board[space.row][space.col] === Space.LOCAL_KING;\n}\nfunction isRemotePiece(space) {\n    return isRemoteMan(space) || isRemoteKing(space);\n}\nfunction isRemoteMan(space) {\n    return isSpaceInsideBoard(space) && board[space.row][space.col] === Space.REMOTE_MAN;\n}\nfunction isRemoteKing(space) {\n    return isSpaceInsideBoard(space) && board[space.row][space.col] === Space.REMOTE_KING;\n}\nfunction isFree(space) {\n    return isSpaceInsideBoard(space) && board[space.row][space.col] === Space.FREE;\n}\nfunction isIndexEqual(i, j) {\n    return i.row === j.row && i.col === j.col;\n}\nfunction drawCircle(x, y, r, color) {\n    g.fillStyle = color;\n    g.beginPath();\n    g.arc(x + r, y + r, r, 0, Math.PI * 2, false);\n    g.closePath();\n    g.fill();\n}\nfunction highlightSpace(space, color) {\n    g.strokeStyle = color;\n    g.beginPath();\n    g.rect(space.col * SIDE_LEN, space.row * SIDE_LEN, SIDE_LEN, SIDE_LEN);\n    g.lineWidth = SELECTION_BORDER_WIDTH;\n    g.stroke();\n}\nfunction getClickedSpace(e) {\n    const rect = boardCanvas.getBoundingClientRect();\n    const x = e.clientX - rect.left;\n    const y = e.clientY - rect.top;\n    const i = { row: Math.floor(y / SIDE_LEN), col: Math.floor(x / SIDE_LEN) };\n    console.log('Clicked board space', i);\n    return i;\n}\nboardCanvas.addEventListener('click', event => {\n    const clickedSpace = getClickedSpace(event);\n    if (goAgain) {\n        if (validMoves) {\n            const move = util_1.anyMatch(validMoves, e => isIndexEqual(e.dest, clickedSpace));\n            if (move) {\n                makeMove(move);\n            }\n        }\n    }\n    else if (isFree(clickedSpace) && selectedSpace) {\n        if (validMoves) {\n            const move = util_1.anyMatch(validMoves, e => isIndexEqual(e.dest, clickedSpace));\n            if (move) {\n                makeMove(move);\n            }\n            else {\n                selectedSpace = null;\n                validMoves = null;\n            }\n        }\n        else {\n            selectedSpace = null;\n            validMoves = null;\n        }\n    }\n    else {\n        if (util_1.anyMatch(allValidMoves(turnPlayer), m => isIndexEqual(m.src, clickedSpace))) {\n            selectedSpace = clickedSpace;\n            validMoves = getValidMoves(selectedSpace);\n        }\n        else {\n            selectedSpace = null;\n            validMoves = null;\n        }\n    }\n    const winner = checkGameOver();\n    drawBoard();\n    if (winner) {\n        const color = winner === Player.LOCAL ? LOCAL_MAN_COLOR : REMOTE_MAN_COLOR;\n        alert(`${color} has won!`);\n    }\n});\nfunction drawBoard() {\n    for (let i = 0; i < board.length; i++) {\n        for (let j = 0; j < board[i].length; j++) {\n            const currentSpace = { row: i, col: j };\n            g.fillStyle = (i + j) % 2 ? DARK_SPACE_COLOR : LIGHT_SPACE_COLOR;\n            const x = j * SIDE_LEN;\n            const y = i * SIDE_LEN;\n            g.fillRect(x, y, SIDE_LEN, SIDE_LEN);\n            if (isRemoteMan(currentSpace)) {\n                drawCircle(x, y, SIDE_LEN / 2, REMOTE_MAN_COLOR);\n            }\n            else if (isRemoteKing(currentSpace)) {\n                drawCircle(x, y, SIDE_LEN / 2, REMOTE_KING_COLOR);\n            }\n            else if (isLocalMan(currentSpace)) {\n                drawCircle(x, y, SIDE_LEN / 2, LOCAL_MAN_COLOR);\n            }\n            else if (isLocalKing(currentSpace)) {\n                drawCircle(x, y, SIDE_LEN / 2, LOCAL_KING_COLOR);\n            }\n        }\n    }\n    allValidMoves(turnPlayer).forEach(m => {\n        highlightSpace(m.src, PIECE_SELECTION_BORDER_COLOR);\n    });\n    if (selectedSpace) {\n        highlightSpace(selectedSpace, PIECE_SELECTION_BORDER_COLOR);\n        validMoves === null || validMoves === void 0 ? void 0 : validMoves.forEach(m => {\n            highlightSpace(m.dest, FREE_SPACE_SELECTION_BORDER_COLOR);\n        });\n    }\n}\nexports.drawBoard = drawBoard;\nfunction makeMove(move) {\n    if (move.jumped) {\n        set(move.jumped, Space.FREE);\n        set(move.dest, get(move.src));\n        set(move.src, Space.FREE);\n        if (tryPromoteToKing(move.dest)) {\n            swapTurns();\n            return;\n        }\n        selectedSpace = move.dest;\n        validMoves = getValidMoves(selectedSpace);\n        if (util_1.anyMatch(validMoves, m => !!m.jumped)) {\n            goAgain = true;\n        }\n        else {\n            swapTurns();\n        }\n    }\n    else {\n        set(move.dest, get(move.src));\n        set(move.src, Space.FREE);\n        tryPromoteToKing(move.dest);\n        swapTurns();\n    }\n}\nfunction swapTurns() {\n    turnPlayer = (turnPlayer === Player.LOCAL ? Player.REMOTE : Player.LOCAL);\n    selectedSpace = null;\n    validMoves = null;\n    goAgain = false;\n}\nfunction tryPromoteToKing(i) {\n    if (isLocalPiece(i) && i.row === 0 && !isLocalKing(i)) {\n        set(i, Space.LOCAL_KING);\n        return true;\n    }\n    else if (isRemotePiece(i) && i.row === 7 && !isRemoteKing(i)) {\n        set(i, Space.REMOTE_KING);\n        return true;\n    }\n    return false;\n}\nfunction checkGameOver() {\n    let localPieceCount = 0;\n    let remotePieceCount = 0;\n    for (let i = 0; i < board.length; i++) {\n        for (let j = 0; j < board[0].length; j++) {\n            const s = { row: i, col: j };\n            if (isLocalPiece(s)) {\n                localPieceCount++;\n            }\n            else if (isRemotePiece(s)) {\n                remotePieceCount++;\n            }\n        }\n    }\n    if (localPieceCount === 0 || allValidMoves(Player.LOCAL).size === 0) {\n        return Player.REMOTE;\n    }\n    else if (remotePieceCount === 0 || allValidMoves(Player.REMOTE).size === 0) {\n        return Player.LOCAL;\n    }\n}\nfunction isSpaceInsideBoard(i) {\n    return i.row >= 0 && i.row < 8 && i.col >= 0 && i.col < 8;\n}\n/** Precondition: i contains a local man */\nfunction validMovesForLocalMan(i) {\n    if (!isLocalMan(i))\n        throw new Error('Illegal state: index must contain local man');\n    const moves = new Set();\n    const left = { row: i.row - 1, col: i.col - 1 };\n    const left2 = { row: i.row - 2, col: i.col - 2 };\n    const right = { row: i.row - 1, col: i.col + 1 };\n    const right2 = { row: i.row - 2, col: i.col + 2 };\n    if (isFree(left))\n        moves.add({ src: i, dest: left });\n    if (isFree(right))\n        moves.add({ src: i, dest: right });\n    if (isRemotePiece(left) && isFree(left2))\n        moves.add({ src: i, dest: left2, jumped: left });\n    if (isRemotePiece(right) && isFree(right2))\n        moves.add({ src: i, dest: right2, jumped: right });\n    return moves;\n}\n/** Precondition: i contains a local king */\nfunction validMovesForLocalKing(i) {\n    if (!isLocalKing(i))\n        throw new Error('Illegal state: index must contain local king');\n    const moves = new Set();\n    const topleft = { row: i.row - 1, col: i.col - 1 };\n    const topleft2 = { row: i.row - 2, col: i.col - 2 };\n    const topright = { row: i.row - 1, col: i.col + 1 };\n    const topright2 = { row: i.row - 2, col: i.col + 2 };\n    const bottomleft = { row: i.row + 1, col: i.col - 1 };\n    const bottomleft2 = { row: i.row + 2, col: i.col - 2 };\n    const bottomright = { row: i.row + 1, col: i.col + 1 };\n    const bottomright2 = { row: i.row + 2, col: i.col + 2 };\n    if (isFree(topleft))\n        moves.add({ src: i, dest: topleft });\n    if (isFree(topright))\n        moves.add({ src: i, dest: topright });\n    if (isFree(bottomleft))\n        moves.add({ src: i, dest: bottomleft });\n    if (isFree(bottomright))\n        moves.add({ src: i, dest: bottomright });\n    if (isRemotePiece(topleft) && isFree(topleft2))\n        moves.add({ src: i, dest: topleft2, jumped: topleft });\n    if (isRemotePiece(topright) && isFree(topright2))\n        moves.add({ src: i, dest: topright2, jumped: topright });\n    if (isRemotePiece(bottomleft) && isFree(bottomleft2))\n        moves.add({ src: i, dest: bottomleft2, jumped: bottomleft });\n    if (isRemotePiece(bottomright) && isFree(bottomright2))\n        moves.add({ src: i, dest: bottomright2, jumped: bottomright });\n    return moves;\n}\n/** Precondition: i contains a remote man */\nfunction validMovesForRemoteMan(i) {\n    if (!isRemoteMan(i))\n        throw new Error('Illegal state: index must contain remote man');\n    const moves = new Set();\n    const left = { row: i.row + 1, col: i.col - 1 };\n    const left2 = { row: i.row + 2, col: i.col - 2 };\n    const right = { row: i.row + 1, col: i.col + 1 };\n    const right2 = { row: i.row + 2, col: i.col + 2 };\n    if (isFree(left))\n        moves.add({ src: i, dest: left });\n    if (isFree(right))\n        moves.add({ src: i, dest: right });\n    if (isLocalPiece(left) && isFree(left2))\n        moves.add({ src: i, dest: left2, jumped: left });\n    if (isLocalPiece(right) && isFree(right2))\n        moves.add({ src: i, dest: right2, jumped: right });\n    return moves;\n}\n/** Precondition: i contains a remote king */\nfunction validMovesForRemoteKing(i) {\n    if (!isRemoteKing(i))\n        throw new Error('Illegal state: index must contain remote king');\n    const moves = new Set();\n    const topleft = { row: i.row - 1, col: i.col - 1 };\n    const topleft2 = { row: i.row - 2, col: i.col - 2 };\n    const topright = { row: i.row - 1, col: i.col + 1 };\n    const topright2 = { row: i.row - 2, col: i.col + 2 };\n    const bottomleft = { row: i.row + 1, col: i.col - 1 };\n    const bottomleft2 = { row: i.row + 2, col: i.col - 2 };\n    const bottomright = { row: i.row + 1, col: i.col + 1 };\n    const bottomright2 = { row: i.row + 2, col: i.col + 2 };\n    if (isFree(topleft))\n        moves.add({ src: i, dest: topleft });\n    if (isFree(topright))\n        moves.add({ src: i, dest: topright });\n    if (isFree(bottomleft))\n        moves.add({ src: i, dest: bottomleft });\n    if (isFree(bottomright))\n        moves.add({ src: i, dest: bottomright });\n    if (isLocalPiece(topleft) && isFree(topleft2))\n        moves.add({ src: i, dest: topleft2, jumped: topleft });\n    if (isLocalPiece(topright) && isFree(topright2))\n        moves.add({ src: i, dest: topright2, jumped: topright });\n    if (isLocalPiece(bottomleft) && isFree(bottomleft2))\n        moves.add({ src: i, dest: bottomleft2, jumped: bottomleft });\n    if (isLocalPiece(bottomright) && isFree(bottomright2))\n        moves.add({ src: i, dest: bottomright2, jumped: bottomright });\n    return moves;\n}\nfunction getValidMoves(i) {\n    if (!isSpaceInsideBoard(i))\n        throw new Error('Index out of bounds');\n    let moves;\n    switch (board[i.row][i.col]) {\n        case Space.LOCAL_MAN:\n            moves = validMovesForLocalMan(i);\n            break;\n        case Space.LOCAL_KING:\n            moves = validMovesForLocalKing(i);\n            break;\n        case Space.REMOTE_MAN:\n            moves = validMovesForRemoteMan(i);\n            break;\n        case Space.REMOTE_KING:\n            moves = validMovesForRemoteKing(i);\n            break;\n        default:\n            return new Set(); // No valid moves for an empty space\n    }\n    // If a piece has jump moves, then those are the only valid moves\n    const jumpMoves = new Set();\n    moves.forEach(m => {\n        if (m.jumped) {\n            jumpMoves.add(m);\n        }\n    });\n    return jumpMoves.size > 0 ? jumpMoves : moves;\n}\n/** Return a Set of all valid moves for player. */\nfunction allValidMoves(p) {\n    const allValidMoveSets = new Set();\n    for (let i = 0; i < board.length; i++) {\n        for (let j = 0; j < board[0].length; j++) {\n            const s = { row: i, col: j };\n            if (p === Player.LOCAL && isLocalPiece(s) || p === Player.REMOTE && isRemotePiece(s)) {\n                allValidMoveSets.add(getValidMoves(s));\n            }\n        }\n    }\n    const allJumpMoves = new Set();\n    const allNonJumpMoves = new Set();\n    allValidMoveSets.forEach(moveSet => {\n        moveSet.forEach(move => {\n            if (move.jumped) {\n                allJumpMoves.add(move);\n            }\n            else {\n                allNonJumpMoves.add(move);\n            }\n        });\n    });\n    // If there are jump moves, those are the only valid moves\n    if (allJumpMoves.size > 0) {\n        return allJumpMoves;\n    }\n    else {\n        return allNonJumpMoves;\n    }\n}\nexports.allValidMoves = allValidMoves;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///653\n")},607:(__unused_webpack_module,exports,__webpack_require__)=>{eval("var __webpack_unused_export__;\n\n/*\n * index.ts\n *\n * Entry point for the application.\n */\n__webpack_unused_export__ = ({ value: true });\nconst gameboard_1 = __webpack_require__(653);\ngameboard_1.drawBoard();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaGVja2Vycy1jbGllbnQvLi9zcmMvaW5kZXgudHM/ZmZiNCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBOzs7O0dBSUc7O0FBRUgsNkNBQXVDO0FBRXZDLHFCQUFTLEVBQUUiLCJmaWxlIjoiNjA3LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIGluZGV4LnRzXG4gKlxuICogRW50cnkgcG9pbnQgZm9yIHRoZSBhcHBsaWNhdGlvbi5cbiAqL1xuXG5pbXBvcnQgeyBkcmF3Qm9hcmQgfSBmcm9tICcuL2dhbWVib2FyZCdcblxuZHJhd0JvYXJkKClcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///607\n")},882:(__unused_webpack_module,exports)=>{eval('\n/*\n * util.ts\n *\n * Module for misc. utility functions.\n */\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.anyMatch = exports.sleep = void 0;\nfunction sleep(ms) {\n    return new Promise(r => setTimeout(r, ms));\n}\nexports.sleep = sleep;\n/** Checks if any Item in s matches. Then return the element in the set that matched.\n * Returns null if there are no matches.\n */\nfunction anyMatch(s, matchFunc) {\n    for (const e of s) {\n        if (matchFunc(e)) {\n            return e;\n        }\n    }\n    return null;\n}\nexports.anyMatch = anyMatch;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaGVja2Vycy1jbGllbnQvLi9zcmMvdXRpbC50cz8xOGRmIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7OztHQUlHOzs7QUFFSCxTQUFnQixLQUFLLENBQUMsRUFBVTtJQUM1QixPQUFPLElBQUksT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUM5QyxDQUFDO0FBRkQsc0JBRUM7QUFFRDs7R0FFRztBQUNILFNBQWdCLFFBQVEsQ0FBSSxDQUFTLEVBQUUsU0FBNEI7SUFDL0QsS0FBSyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUU7UUFDZixJQUFJLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRTtZQUNkLE9BQU8sQ0FBQztTQUNYO0tBQ0o7SUFDRCxPQUFPLElBQUk7QUFDZixDQUFDO0FBUEQsNEJBT0MiLCJmaWxlIjoiODgyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIHV0aWwudHNcbiAqXG4gKiBNb2R1bGUgZm9yIG1pc2MuIHV0aWxpdHkgZnVuY3Rpb25zLlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBzbGVlcChtczogbnVtYmVyKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKHIgPT4gc2V0VGltZW91dChyLCBtcykpXG59XG5cbi8qKiBDaGVja3MgaWYgYW55IEl0ZW0gaW4gcyBtYXRjaGVzLiBUaGVuIHJldHVybiB0aGUgZWxlbWVudCBpbiB0aGUgc2V0IHRoYXQgbWF0Y2hlZC5cbiAqIFJldHVybnMgbnVsbCBpZiB0aGVyZSBhcmUgbm8gbWF0Y2hlcy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFueU1hdGNoPFQ+KHM6IFNldDxUPiwgbWF0Y2hGdW5jOiAoZTogVCkgPT4gYm9vbGVhbikge1xuICAgIGZvciAoY29uc3QgZSBvZiBzKSB7XG4gICAgICAgIGlmIChtYXRjaEZ1bmMoZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBlXG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGxcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///882\n')}},__webpack_module_cache__={};function __webpack_require__(Q){if(__webpack_module_cache__[Q])return __webpack_module_cache__[Q].exports;var U=__webpack_module_cache__[Q]={exports:{}};return __webpack_modules__[Q](U,U.exports,__webpack_require__),U.exports}__webpack_require__(607)})();