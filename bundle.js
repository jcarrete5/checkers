(()=>{"use strict";var __webpack_modules__={653:(__unused_webpack_module,exports,__webpack_require__)=>{eval("\n/**\n * gameboard.ts\n *\n * Module for implementing rendering and maintaining state of the gameboard.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.drawBoard = void 0;\nconst util_1 = __webpack_require__(882);\nconst boardCanvas = document.getElementById('board-canvas');\n/*************\n * CONSTANTS\n *************/\nconst LOCAL_MAN_COLOR = 'black';\nconst LOCAL_KING_COLOR = 'grey';\nconst REMOTE_MAN_COLOR = 'red';\nconst REMOTE_KING_COLOR = 'pink';\nconst DARK_SPACE_COLOR = '#8db596';\nconst LIGHT_SPACE_COLOR = '#bedbbb';\nconst PIECE_SELECTION_BORDER_COLOR = 'red';\nconst FREE_SPACE_SELECTION_BORDER_COLOR = 'blue';\nconst SELECTION_BORDER_WIDTH = 2;\nconst SIDE_LEN = boardCanvas.width / 8;\n/** Enumeration of values that can occupy a space on the board. */\nvar Space;\n(function (Space) {\n    /** A free space */\n    Space[Space[\"FREE\"] = 0] = \"FREE\";\n    /** Local player's man */\n    Space[Space[\"LOCAL_MAN\"] = 1] = \"LOCAL_MAN\";\n    /** Remote player's man */\n    Space[Space[\"REMOTE_MAN\"] = 2] = \"REMOTE_MAN\";\n    /** Local player's king */\n    Space[Space[\"LOCAL_KING\"] = 3] = \"LOCAL_KING\";\n    /** Remote player's king */\n    Space[Space[\"REMOTE_KING\"] = 4] = \"REMOTE_KING\";\n})(Space || (Space = {}));\nvar Player;\n(function (Player) {\n    Player[Player[\"REMOTE\"] = 1] = \"REMOTE\";\n    Player[Player[\"LOCAL\"] = 2] = \"LOCAL\";\n})(Player || (Player = {}));\n/************************\n * STATE INITIALIZATION\n ************************/\nconst O = Space.LOCAL_MAN;\nconst X = Space.REMOTE_MAN;\nconst _ = Space.FREE;\n/** Board state */\nconst board = [\n    [_, X, _, X, _, X, _, X],\n    [X, _, X, _, X, _, X, _],\n    [_, X, _, X, _, X, _, X],\n    [_, _, _, _, _, _, _, _],\n    [_, _, _, _, _, _, _, _],\n    [O, _, O, _, O, _, O, _],\n    [_, O, _, O, _, O, _, O],\n    [O, _, O, _, O, _, O, _],\n];\n/** Graphics context */\nconst _g = boardCanvas.getContext('2d');\nif (!_g)\n    throw 'Failed to load graphics 2D context for board canvas';\nconst g = _g;\n/** List of valid moves for currently selected piece. */\nlet validMoves = null;\n/** Current turn player. */\nlet turnPlayer = Player.LOCAL;\n/** Current selected space on the board. */\nlet selectedSpace = null;\n/** True if the player can make another move. Only the piece that moved can move again */\nlet goAgain = false;\n/***************\n * FUNCTIONS\n ***************/\n/** Set the state of a space on the board. */\nfunction set(i, v) {\n    board[i.row][i.col] = v;\n}\n/** Get the stat of a space on the board */\nfunction get(i) {\n    return board[i.row][i.col];\n}\nfunction isLocalPiece(space) {\n    return isLocalMan(space) || isLocalKing(space);\n}\nfunction isLocalMan(space) {\n    return isSpaceInsideBoard(space) && board[space.row][space.col] === Space.LOCAL_MAN;\n}\nfunction isLocalKing(space) {\n    return isSpaceInsideBoard(space) && board[space.row][space.col] === Space.LOCAL_KING;\n}\nfunction isRemotePiece(space) {\n    return isRemoteMan(space) || isRemoteKing(space);\n}\nfunction isRemoteMan(space) {\n    return isSpaceInsideBoard(space) && board[space.row][space.col] === Space.REMOTE_MAN;\n}\nfunction isRemoteKing(space) {\n    return isSpaceInsideBoard(space) && board[space.row][space.col] === Space.REMOTE_KING;\n}\nfunction isFree(space) {\n    return isSpaceInsideBoard(space) && board[space.row][space.col] === Space.FREE;\n}\nfunction isIndexEqual(i, j) {\n    return i.row === j.row && i.col === j.col;\n}\nfunction drawCircle(x, y, r, color) {\n    g.fillStyle = color;\n    g.beginPath();\n    g.arc(x + r, y + r, r, 0, Math.PI * 2, false);\n    g.closePath();\n    g.fill();\n}\nfunction highlightSpace(space, color) {\n    g.strokeStyle = color;\n    g.beginPath();\n    g.rect(space.col * SIDE_LEN, space.row * SIDE_LEN, SIDE_LEN, SIDE_LEN);\n    g.lineWidth = SELECTION_BORDER_WIDTH;\n    g.stroke();\n}\nfunction getClickedSpace(e) {\n    let rect = boardCanvas.getBoundingClientRect();\n    let x = e.clientX - rect.left;\n    let y = e.clientY - rect.top;\n    const i = { row: Math.floor(y / SIDE_LEN), col: Math.floor(x / SIDE_LEN) };\n    console.log('Clicked board space', i);\n    return i;\n}\nboardCanvas.addEventListener('click', e => {\n    const clickedSpace = getClickedSpace(e);\n    if (goAgain) {\n        if (validMoves) {\n            const move = util_1.anyMatch(validMoves, e => isIndexEqual(e.dest, clickedSpace));\n            if (move) {\n                makeMove(move);\n            }\n        }\n    }\n    else if (isFree(clickedSpace) && selectedSpace) {\n        if (validMoves) {\n            const move = util_1.anyMatch(validMoves, e => isIndexEqual(e.dest, clickedSpace));\n            if (move) {\n                makeMove(move);\n            }\n            else {\n                selectedSpace = null;\n                validMoves = null;\n            }\n        }\n        else {\n            selectedSpace = null;\n            validMoves = null;\n        }\n    }\n    else {\n        if (util_1.anyMatch(allValidMoves(turnPlayer), m => isIndexEqual(m.src, clickedSpace))) {\n            selectedSpace = clickedSpace;\n            validMoves = getValidMoves(selectedSpace);\n        }\n        else {\n            selectedSpace = null;\n            validMoves = null;\n        }\n    }\n    const winner = checkGameOver();\n    drawBoard();\n    if (winner) {\n        const color = winner === Player.LOCAL ? LOCAL_MAN_COLOR : REMOTE_MAN_COLOR;\n        alert(`${color} has won!`);\n    }\n});\nfunction drawBoard() {\n    for (let i = 0; i < board.length; i++) {\n        for (let j = 0; j < board[i].length; j++) {\n            let currentSpace = { row: i, col: j };\n            g.fillStyle = (i + j) % 2 ? DARK_SPACE_COLOR : LIGHT_SPACE_COLOR;\n            const x = j * SIDE_LEN;\n            const y = i * SIDE_LEN;\n            g.fillRect(x, y, SIDE_LEN, SIDE_LEN);\n            if (isRemoteMan(currentSpace)) {\n                drawCircle(x, y, SIDE_LEN / 2, REMOTE_MAN_COLOR);\n            }\n            else if (isRemoteKing(currentSpace)) {\n                drawCircle(x, y, SIDE_LEN / 2, REMOTE_KING_COLOR);\n            }\n            else if (isLocalMan(currentSpace)) {\n                drawCircle(x, y, SIDE_LEN / 2, LOCAL_MAN_COLOR);\n            }\n            else if (isLocalKing(currentSpace)) {\n                drawCircle(x, y, SIDE_LEN / 2, LOCAL_KING_COLOR);\n            }\n        }\n    }\n    allValidMoves(turnPlayer).forEach(m => {\n        highlightSpace(m.src, PIECE_SELECTION_BORDER_COLOR);\n    });\n    if (selectedSpace) {\n        highlightSpace(selectedSpace, PIECE_SELECTION_BORDER_COLOR);\n        validMoves === null || validMoves === void 0 ? void 0 : validMoves.forEach(m => {\n            highlightSpace(m.dest, FREE_SPACE_SELECTION_BORDER_COLOR);\n        });\n    }\n}\nexports.drawBoard = drawBoard;\nfunction makeMove(move) {\n    if (move.jumped) {\n        set(move.jumped, Space.FREE);\n        set(move.dest, get(move.src));\n        set(move.src, Space.FREE);\n        if (tryPromoteToKing(move.dest)) {\n            swapTurns();\n            return;\n        }\n        selectedSpace = move.dest;\n        validMoves = getValidMoves(selectedSpace);\n        if (util_1.anyMatch(validMoves, m => !!m.jumped)) {\n            goAgain = true;\n        }\n        else {\n            swapTurns();\n        }\n    }\n    else {\n        set(move.dest, get(move.src));\n        set(move.src, Space.FREE);\n        tryPromoteToKing(move.dest);\n        swapTurns();\n    }\n}\nfunction swapTurns() {\n    turnPlayer = (turnPlayer === Player.LOCAL ? Player.REMOTE : Player.LOCAL);\n    selectedSpace = null;\n    validMoves = null;\n    goAgain = false;\n}\nfunction tryPromoteToKing(i) {\n    if (isLocalPiece(i) && i.row === 0 && !isLocalKing(i)) {\n        set(i, Space.LOCAL_KING);\n        return true;\n    }\n    else if (isRemotePiece(i) && i.row === 7 && !isRemoteKing(i)) {\n        set(i, Space.REMOTE_KING);\n        return true;\n    }\n    return false;\n}\nfunction checkGameOver() {\n    let localPieceCount = 0;\n    let remotePieceCount = 0;\n    for (let i = 0; i < board.length; i++) {\n        for (let j = 0; j < board[0].length; j++) {\n            const s = { row: i, col: j };\n            if (isLocalPiece(s)) {\n                localPieceCount++;\n            }\n            else if (isRemotePiece(s)) {\n                remotePieceCount++;\n            }\n        }\n    }\n    if (localPieceCount === 0 || allValidMoves(Player.LOCAL).size === 0) {\n        return Player.REMOTE;\n    }\n    else if (remotePieceCount === 0 || allValidMoves(Player.REMOTE).size === 0) {\n        return Player.LOCAL;\n    }\n}\nfunction isSpaceInsideBoard(i) {\n    return i.row >= 0 && i.row < 8 && i.col >= 0 && i.col < 8;\n}\n/** Precondition: i contains a local man */\nfunction validMovesForLocalMan(i) {\n    if (!isLocalMan(i))\n        throw 'Illegal state: index must contain local man';\n    const moves = new Set();\n    const left = { row: i.row - 1, col: i.col - 1 };\n    const left2 = { row: i.row - 2, col: i.col - 2 };\n    const right = { row: i.row - 1, col: i.col + 1 };\n    const right2 = { row: i.row - 2, col: i.col + 2 };\n    if (isFree(left))\n        moves.add({ src: i, dest: left });\n    if (isFree(right))\n        moves.add({ src: i, dest: right });\n    if (isRemotePiece(left) && isFree(left2))\n        moves.add({ src: i, dest: left2, jumped: left });\n    if (isRemotePiece(right) && isFree(right2))\n        moves.add({ src: i, dest: right2, jumped: right });\n    return moves;\n}\n/** Precondition: i contains a local king */\nfunction validMovesForLocalKing(i) {\n    if (!isLocalKing(i))\n        throw 'Illegal state: index must contain local king';\n    const moves = new Set();\n    const topleft = { row: i.row - 1, col: i.col - 1 };\n    const topleft2 = { row: i.row - 2, col: i.col - 2 };\n    const topright = { row: i.row - 1, col: i.col + 1 };\n    const topright2 = { row: i.row - 2, col: i.col + 2 };\n    const bottomleft = { row: i.row + 1, col: i.col - 1 };\n    const bottomleft2 = { row: i.row + 2, col: i.col - 2 };\n    const bottomright = { row: i.row + 1, col: i.col + 1 };\n    const bottomright2 = { row: i.row + 2, col: i.col + 2 };\n    if (isFree(topleft))\n        moves.add({ src: i, dest: topleft });\n    if (isFree(topright))\n        moves.add({ src: i, dest: topright });\n    if (isFree(bottomleft))\n        moves.add({ src: i, dest: bottomleft });\n    if (isFree(bottomright))\n        moves.add({ src: i, dest: bottomright });\n    if (isRemotePiece(topleft) && isFree(topleft2))\n        moves.add({ src: i, dest: topleft2, jumped: topleft });\n    if (isRemotePiece(topright) && isFree(topright2))\n        moves.add({ src: i, dest: topright2, jumped: topright });\n    if (isRemotePiece(bottomleft) && isFree(bottomleft2))\n        moves.add({ src: i, dest: bottomleft2, jumped: bottomleft });\n    if (isRemotePiece(bottomright) && isFree(bottomright2))\n        moves.add({ src: i, dest: bottomright2, jumped: bottomright });\n    return moves;\n}\n/** Precondition: i contains a remote man */\nfunction validMovesForRemoteMan(i) {\n    if (!isRemoteMan(i))\n        throw 'Illegal state: index must contain remote man';\n    const moves = new Set();\n    const left = { row: i.row + 1, col: i.col - 1 };\n    const left2 = { row: i.row + 2, col: i.col - 2 };\n    const right = { row: i.row + 1, col: i.col + 1 };\n    const right2 = { row: i.row + 2, col: i.col + 2 };\n    if (isFree(left))\n        moves.add({ src: i, dest: left });\n    if (isFree(right))\n        moves.add({ src: i, dest: right });\n    if (isLocalPiece(left) && isFree(left2))\n        moves.add({ src: i, dest: left2, jumped: left });\n    if (isLocalPiece(right) && isFree(right2))\n        moves.add({ src: i, dest: right2, jumped: right });\n    return moves;\n}\n/** Precondition: i contains a remote king */\nfunction validMovesForRemoteKing(i) {\n    if (!isRemoteKing(i))\n        throw 'Illegal state: index must contain remote king';\n    const moves = new Set();\n    const topleft = { row: i.row - 1, col: i.col - 1 };\n    const topleft2 = { row: i.row - 2, col: i.col - 2 };\n    const topright = { row: i.row - 1, col: i.col + 1 };\n    const topright2 = { row: i.row - 2, col: i.col + 2 };\n    const bottomleft = { row: i.row + 1, col: i.col - 1 };\n    const bottomleft2 = { row: i.row + 2, col: i.col - 2 };\n    const bottomright = { row: i.row + 1, col: i.col + 1 };\n    const bottomright2 = { row: i.row + 2, col: i.col + 2 };\n    if (isFree(topleft))\n        moves.add({ src: i, dest: topleft });\n    if (isFree(topright))\n        moves.add({ src: i, dest: topright });\n    if (isFree(bottomleft))\n        moves.add({ src: i, dest: bottomleft });\n    if (isFree(bottomright))\n        moves.add({ src: i, dest: bottomright });\n    if (isLocalPiece(topleft) && isFree(topleft2))\n        moves.add({ src: i, dest: topleft2, jumped: topleft });\n    if (isLocalPiece(topright) && isFree(topright2))\n        moves.add({ src: i, dest: topright2, jumped: topright });\n    if (isLocalPiece(bottomleft) && isFree(bottomleft2))\n        moves.add({ src: i, dest: bottomleft2, jumped: bottomleft });\n    if (isLocalPiece(bottomright) && isFree(bottomright2))\n        moves.add({ src: i, dest: bottomright2, jumped: bottomright });\n    return moves;\n}\nfunction getValidMoves(i) {\n    if (!isSpaceInsideBoard(i))\n        throw 'Index out of bounds';\n    let moves;\n    switch (board[i.row][i.col]) {\n        case Space.LOCAL_MAN:\n            moves = validMovesForLocalMan(i);\n            break;\n        case Space.LOCAL_KING:\n            moves = validMovesForLocalKing(i);\n            break;\n        case Space.REMOTE_MAN:\n            moves = validMovesForRemoteMan(i);\n            break;\n        case Space.REMOTE_KING:\n            moves = validMovesForRemoteKing(i);\n            break;\n        default:\n            return new Set(); // No valid moves for an empty space\n    }\n    // If a piece has jump moves, then those are the only valid moves\n    const jumpMoves = new Set();\n    moves.forEach(m => {\n        if (m.jumped) {\n            jumpMoves.add(m);\n        }\n    });\n    return jumpMoves.size > 0 ? jumpMoves : moves;\n}\n/** Return a Set of all valid moves for player. */\nfunction allValidMoves(p) {\n    const allValidMoveSets = new Set();\n    for (let i = 0; i < board.length; i++) {\n        for (let j = 0; j < board[0].length; j++) {\n            const s = { row: i, col: j };\n            if (p === Player.LOCAL && isLocalPiece(s) || p === Player.REMOTE && isRemotePiece(s)) {\n                allValidMoveSets.add(getValidMoves(s));\n            }\n        }\n    }\n    const allJumpMoves = new Set();\n    const allNonJumpMoves = new Set();\n    allValidMoveSets.forEach(moveSet => {\n        moveSet.forEach(move => {\n            if (move.jumped) {\n                allJumpMoves.add(move);\n            }\n            else {\n                allNonJumpMoves.add(move);\n            }\n        });\n    });\n    // If there are jump moves, those are the only valid moves\n    if (allJumpMoves.size > 0) {\n        return allJumpMoves;\n    }\n    else {\n        return allNonJumpMoves;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaGVja2Vycy1jbGllbnQvLi9zcmMvZ2FtZWJvYXJkLnRzPzQ3MjEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7O0dBSUc7OztBQUVILHdDQUFrQztBQUVsQyxNQUFNLFdBQVcsR0FBRyxRQUFRLENBQUMsY0FBYyxDQUFDLGNBQWMsQ0FBc0I7QUFFaEY7O2VBRWU7QUFFZixNQUFNLGVBQWUsR0FBRyxPQUFPO0FBQy9CLE1BQU0sZ0JBQWdCLEdBQUcsTUFBTTtBQUMvQixNQUFNLGdCQUFnQixHQUFHLEtBQUs7QUFDOUIsTUFBTSxpQkFBaUIsR0FBRyxNQUFNO0FBQ2hDLE1BQU0sZ0JBQWdCLEdBQUcsU0FBUztBQUNsQyxNQUFNLGlCQUFpQixHQUFHLFNBQVM7QUFDbkMsTUFBTSw0QkFBNEIsR0FBRyxLQUFLO0FBQzFDLE1BQU0saUNBQWlDLEdBQUcsTUFBTTtBQUNoRCxNQUFNLHNCQUFzQixHQUFHLENBQUM7QUFDaEMsTUFBTSxRQUFRLEdBQUcsV0FBVyxDQUFDLEtBQUssR0FBRyxDQUFDO0FBRXRDLGtFQUFrRTtBQUNsRSxJQUFLLEtBV0o7QUFYRCxXQUFLLEtBQUs7SUFDTixtQkFBbUI7SUFDbkIsaUNBQUk7SUFDSix5QkFBeUI7SUFDekIsMkNBQVM7SUFDVCwwQkFBMEI7SUFDMUIsNkNBQVU7SUFDViwwQkFBMEI7SUFDMUIsNkNBQVU7SUFDViwyQkFBMkI7SUFDM0IsK0NBQVc7QUFDZixDQUFDLEVBWEksS0FBSyxLQUFMLEtBQUssUUFXVDtBQUVELElBQUssTUFHSjtBQUhELFdBQUssTUFBTTtJQUNQLHVDQUFVO0lBQ1YscUNBQUs7QUFDVCxDQUFDLEVBSEksTUFBTSxLQUFOLE1BQU0sUUFHVjtBQUVEOzswQkFFMEI7QUFFMUIsTUFBTSxDQUFDLEdBQUcsS0FBSyxDQUFDLFNBQVM7QUFDekIsTUFBTSxDQUFDLEdBQUcsS0FBSyxDQUFDLFVBQVU7QUFDMUIsTUFBTSxDQUFDLEdBQUcsS0FBSyxDQUFDLElBQUk7QUFFcEIs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RUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLEdBQUcsR0FBQyxDQUFDLEVBQUU7SUFDNUQsTUFBTSxVQUFVLEdBQWUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLEdBQUcsR0FBQyxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxHQUFHLEdBQUMsQ0FBQyxFQUFFO0lBQzdELE1BQU0sV0FBVyxHQUFlLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxHQUFHLEdBQUMsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUMsR0FBRyxHQUFDLENBQUMsRUFBRTtJQUM5RCxNQUFNLFdBQVcsR0FBZSxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUMsR0FBRyxHQUFDLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLEdBQUcsR0FBQyxDQUFDLEVBQUU7SUFDOUQsTUFBTSxZQUFZLEdBQWUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLEdBQUcsR0FBQyxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxHQUFHLEdBQUMsQ0FBQyxFQUFFO0lBQy9ELElBQUksTUFBTSxDQUFDLE9BQU8sQ0FBQztRQUFFLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUMsQ0FBQztJQUN2RCxJQUFJLE1BQU0sQ0FBQyxRQUFRLENBQUM7UUFBRSxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFDLENBQUM7SUFDekQsSUFBSSxNQUFNLENBQUMsVUFBVSxDQUFDO1FBQUUsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBQyxDQUFDO0lBQzdELElBQUksTUFBTSxDQUFDLFdBQVcsQ0FBQztRQUFFLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxXQUFXLEVBQUMsQ0FBQztJQUMvRCxJ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QUFDLE1BQU0sSUFBSSxhQUFhLENBQUMsQ0FBQyxDQUFDLEVBQUU7Z0JBQ2xGLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDekM7U0FDSjtLQUNKO0lBQ0QsTUFBTSxZQUFZLEdBQUcsSUFBSSxHQUFHLEVBQVE7SUFDcEMsTUFBTSxlQUFlLEdBQUcsSUFBSSxHQUFHLEVBQVE7SUFDdkMsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFO1FBQy9CLE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDbkIsSUFBSSxJQUFJLENBQUMsTUFBTSxFQUFFO2dCQUNiLFlBQVksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDO2FBQ3pCO2lCQUFNO2dCQUNILGVBQWUsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDO2FBQzVCO1FBQ0wsQ0FBQyxDQUFDO0lBQ04sQ0FBQyxDQUFDO0lBQ0YsMERBQTBEO0lBQzFELElBQUksWUFBWSxDQUFDLElBQUksR0FBRyxDQUFDLEVBQUU7UUFDdkIsT0FBTyxZQUFZO0tBQ3RCO1NBQU07UUFDSCxPQUFPLGVBQWU7S0FDekI7QUFDTCxDQUFDIiwiZmlsZSI6IjY1My5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogZ2FtZWJvYXJkLnRzXG4gKlxuICogTW9kdWxlIGZvciBpbXBsZW1lbnRpbmcgcmVuZGVyaW5nIGFuZCBtYWludGFpbmluZyBzdGF0ZSBvZiB0aGUgZ2FtZWJvYXJkLlxuICovXG5cbmltcG9ydCB7IGFueU1hdGNoIH0gZnJvbSBcIi4vdXRpbFwiO1xuXG5jb25zdCBib2FyZENhbnZhcyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdib2FyZC1jYW52YXMnKSBhcyBIVE1MQ2FudmFzRWxlbWVudFxuXG4vKioqKioqKioqKioqKlxuICogQ09OU1RBTlRTXG4gKioqKioqKioqKioqKi9cblxuY29uc3QgTE9DQUxfTUFOX0NPTE9SID0gJ2JsYWNrJ1xuY29uc3QgTE9DQUxfS0lOR19DT0xPUiA9ICdncmV5J1xuY29uc3QgUkVNT1RFX01BTl9DT0xPUiA9ICdyZWQnXG5jb25zdCBSRU1PVEVfS0lOR19DT0xPUiA9ICdwaW5rJ1xuY29uc3QgREFSS19TUEFDRV9DT0xPUiA9ICcjOGRiNTk2J1xuY29uc3QgTElHSFRfU1BBQ0VfQ09MT1IgPSAnI2JlZGJiYidcbmNvbnN0IFBJRUNFX1NFTEVDVElPTl9CT1JERVJfQ09MT1IgPSAncmVkJ1xuY29uc3QgRlJFRV9TUEFDRV9TRUxFQ1RJT05fQk9SREVSX0NPTE9SID0gJ2JsdWUnXG5jb25zdCBTRUxFQ1RJT05fQk9SREVSX1dJRFRIID0gMlxuY29uc3QgU0lERV9MRU4gPSBib2FyZENhbnZhcy53aWR0aCAvIDhcblxuLyoqIEVudW1lcmF0aW9uIG9mIHZhbHVlcyB0aGF0IGNhbiBvY2N1cHkgYSBzcGFjZSBvbiB0aGUgYm9hcmQuICovXG5lbnVtIFNwYWNlIHtcbiAgICAvKiogQSBmcmVlIHNwYWNlICovXG4gICAgRlJFRSxcbiAgICAvKiogTG9jYWwgcGxheWVyJ3MgbWFuICovXG4gICAgTE9DQUxfTUFOLFxuICAgIC8qKiBSZW1vdGUgcGxheWVyJ3MgbWFuICovXG4gICAgUkVNT1RFX01BTixcbiAgICAvKiogTG9jYWwgcGxheWVyJ3Mga2luZyAqL1xuICAgIExPQ0FMX0tJTkcsXG4gICAgLyoqIFJlbW90ZSBwbGF5ZXIncyBraW5nICovXG4gICAgUkVNT1RFX0tJTkcsXG59XG5cbmVudW0gUGxheWVyIHtcbiAgICBSRU1PVEUgPSAxLFxuICAgIExPQ0FMLFxufVxuXG4vKioqKioqKioqKioqKioqKioqKioqKioqXG4gKiBTVEFURSBJTklUSUFMSVpBVElPTlxuICoqKioqKioqKioqKioqKioqKioqKioqKi9cblxuY29uc3QgTyA9IFNwYWNlLkxPQ0FMX01BTlxuY29uc3QgWCA9IFNwYWNlLlJFTU9URV9NQU5cbmNvbnN0IF8gPSBTcGFjZS5GUkVFXG5cbi8qKiBCb2FyZCBzdGF0ZSAqL1xuY29uc3QgYm9hcmQgPSBbXG4gICAgW18sIFgsIF8sIFgsIF8sIFgsIF8sIFhdLFxuICAgIFtYLCBfLCBYLCBfLCBYLCBfLCBYLCBfXSxcbiAgICBbXywgWCwgXywgWCwgXywgWCwgXywgWF0sXG4gICAgW18sIF8sIF8sIF8sIF8sIF8sIF8sIF9dLFxuICAgIFtfLCBfLCBfLCBfLCBfLCBfLCBfLCBfXSxcbiAgICBbTywgXywgTywgXywgTywgXywgTywgX10sXG4gICAgW18sIE8sIF8sIE8sIF8sIE8sIF8sIE9dLFxuICAgIFtPLCBfLCBPLCBfLCBPLCBfLCBPLCBfXSxcbl1cblxuLyoqIEdyYXBoaWNzIGNvbnRleHQgKi9cbmNvbnN0IF9nID0gYm9hcmRDYW52YXMuZ2V0Q29udGV4dCgnMmQnKVxuaWYgKCFfZykgdGhyb3cgJ0ZhaWxlZCB0byBsb2FkIGdyYXBoaWNzIDJEIGNvbnRleHQgZm9yIGJvYXJkIGNhbnZhcydcbmNvbnN0IGcgPSBfZ1xuXG5pbnRlcmZhY2UgQm9hcmRJbmRleCB7XG4gICAgcm93OiBudW1iZXJcbiAgICBjb2w6IG51bWJlclxufVxuXG5pbnRlcmZhY2UgTW92ZSB7XG4gICAgLyoqIFNvdXJjZSBvZiBqdW1wICovXG4gICAgc3JjOiBCb2FyZEluZGV4XG4gICAgLyoqIERlc3RpbmF0aW9uIG9mIGp1bXAgKi9cbiAgICBkZXN0OiBCb2FyZEluZGV4XG4gICAgLyoqIE9wdGlvbmFsIGluZGV4IHRoYXQgd2FzIGp1bXBlZCAqL1xuICAgIGp1bXBlZD86IEJvYXJkSW5kZXhcbn1cblxuLyoqIExpc3Qgb2YgdmFsaWQgbW92ZXMgZm9yIGN1cnJlbnRseSBzZWxlY3RlZCBwaWVjZS4gKi9cbmxldCB2YWxpZE1vdmVzOiBTZXQ8TW92ZT4gfCBudWxsID0gbnVsbFxuLyoqIEN1cnJlbnQgdHVybiBwbGF5ZXIuICovXG5sZXQgdHVyblBsYXllciA9IFBsYXllci5MT0NBTFxuLyoqIEN1cnJlbnQgc2VsZWN0ZWQgc3BhY2Ugb24gdGhlIGJvYXJkLiAqL1xubGV0IHNlbGVjdGVkU3BhY2U6IEJvYXJkSW5kZXggfCBudWxsID0gbnVsbFxuLyoqIFRydWUgaWYgdGhlIHBsYXllciBjYW4gbWFrZSBhbm90aGVyIG1vdmUuIE9ubHkgdGhlIHBpZWNlIHRoYXQgbW92ZWQgY2FuIG1vdmUgYWdhaW4gKi9cbmxldCBnb0FnYWluOiBib29sZWFuID0gZmFsc2VcblxuLyoqKioqKioqKioqKioqKlxuICogRlVOQ1RJT05TXG4gKioqKioqKioqKioqKioqL1xuXG4vKiogU2V0IHRoZSBzdGF0ZSBvZiBhIHNwYWNlIG9uIHRoZSBib2FyZC4gKi9cbmZ1bmN0aW9uIHNldChpOiBCb2FyZEluZGV4LCB2OiBTcGFjZSkge1xuICAgIGJvYXJkW2kucm93XVtpLmNvbF0gPSB2XG59XG5cbi8qKiBHZXQgdGhlIHN0YXQgb2YgYSBzcGFjZSBvbiB0aGUgYm9hcmQgKi9cbmZ1bmN0aW9uIGdldChpOiBCb2FyZEluZGV4KSB7XG4gICAgcmV0dXJuIGJvYXJkW2kucm93XVtpLmNvbF1cbn1cblxuZnVuY3Rpb24gaXNMb2NhbFBpZWNlKHNwYWNlOiBCb2FyZEluZGV4KSB7XG4gICAgcmV0dXJuIGlzTG9jYWxNYW4oc3BhY2UpIHx8IGlzTG9jYWxLaW5nKHNwYWNlKVxufVxuXG5mdW5jdGlvbiBpc0xvY2FsTWFuKHNwYWNlOiBCb2FyZEluZGV4KSB7XG4gICAgcmV0dXJuIGlzU3BhY2VJbnNpZGVCb2FyZChzcGFjZSkgJiYgYm9hcmRbc3BhY2Uucm93XVtzcGFjZS5jb2xdID09PSBTcGFjZS5MT0NBTF9NQU5cbn1cblxuZnVuY3Rpb24gaXNMb2NhbEtpbmcoc3BhY2U6IEJvYXJkSW5kZXgpIHtcbiAgICByZXR1cm4gaXNTcGFjZUluc2lkZUJvYXJkKHNwYWNlKSAmJiBib2FyZFtzcGFjZS5yb3ddW3NwYWNlLmNvbF0gPT09IFNwYWNlLkxPQ0FMX0tJTkdcbn1cblxuZnVuY3Rpb24gaXNSZW1vdGVQaWVjZShzcGFjZTogQm9hcmRJbmRleCkge1xuICAgIHJldHVybiBpc1JlbW90ZU1hbihzcGFjZSkgfHwgaXNSZW1vdGVLaW5nKHNwYWNlKVxufVxuXG5mdW5jdGlvbiBpc1JlbW90ZU1hbihzcGFjZTogQm9hcmRJbmRleCkge1xuICAgIHJldHVybiBpc1NwYWNlSW5zaWRlQm9hcmQoc3BhY2UpICYmIGJvYXJkW3NwYWNlLnJvd11bc3BhY2UuY29sXSA9PT0gU3BhY2UuUkVNT1RFX01BTlxufVxuXG5mdW5jdGlvbiBpc1JlbW90ZUtpbmcoc3BhY2U6IEJvYXJkSW5kZXgpIHtcbiAgICByZXR1cm4gaXNTcGFjZUluc2lkZUJvYXJkKHNwYWNlKSAmJiBib2FyZFtzcGFjZS5yb3ddW3NwYWNlLmNvbF0gPT09IFNwYWNlLlJFTU9URV9LSU5HXG59XG5cbmZ1bmN0aW9uIGlzRnJlZShzcGFjZTogQm9hcmRJbmRleCkge1xuICAgIHJldHVybiBpc1NwYWNlSW5zaWRlQm9hcmQoc3BhY2UpICYmIGJvYXJkW3NwYWNlLnJvd11bc3BhY2UuY29sXSA9PT0gU3BhY2UuRlJFRVxufVxuXG5mdW5jdGlvbiBpc0luZGV4RXF1YWwoaTogQm9hcmRJbmRleCwgajogQm9hcmRJbmRleCkge1xuICAgIHJldHVybiBpLnJvdyA9PT0gai5yb3cgJiYgaS5jb2wgPT09IGouY29sXG59XG5cbmZ1bmN0aW9uIGRyYXdDaXJjbGUoeDogbnVtYmVyLCB5OiBudW1iZXIsIHI6IG51bWJlciwgY29sb3I6IHN0cmluZykge1xuICAgIGcuZmlsbFN0eWxlID0gY29sb3JcbiAgICBnLmJlZ2luUGF0aCgpXG4gICAgZy5hcmMoeCArIHIsIHkgKyByLCByLCAwLCBNYXRoLlBJICogMiwgZmFsc2UpXG4gICAgZy5jbG9zZVBhdGgoKVxuICAgIGcuZmlsbCgpXG59XG5cbmZ1bmN0aW9uIGhpZ2hsaWdodFNwYWNlKHNwYWNlOiBCb2FyZEluZGV4LCBjb2xvcjogc3RyaW5nKSB7XG4gICAgZy5zdHJva2VTdHlsZSA9IGNvbG9yXG4gICAgZy5iZWdpblBhdGgoKVxuICAgIGcucmVjdChzcGFjZS5jb2wgKiBTSURFX0xFTiwgc3BhY2Uucm93ICogU0lERV9MRU4sIFNJREVfTEVOLCBTSURFX0xFTilcbiAgICBnLmxpbmVXaWR0aCA9IFNFTEVDVElPTl9CT1JERVJfV0lEVEhcbiAgICBnLnN0cm9rZSgpXG59XG5cbmZ1bmN0aW9uIGdldENsaWNrZWRTcGFjZShlOiBNb3VzZUV2ZW50KSB7XG4gICAgbGV0IHJlY3QgPSBib2FyZENhbnZhcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVxuICAgIGxldCB4ID0gZS5jbGllbnRYIC0gcmVjdC5sZWZ0XG4gICAgbGV0IHkgPSBlLmNsaWVudFkgLSByZWN0LnRvcFxuICAgIGNvbnN0IGk6IEJvYXJkSW5kZXggPSB7IHJvdzogTWF0aC5mbG9vcih5L1NJREVfTEVOKSwgY29sOiBNYXRoLmZsb29yKHgvU0lERV9MRU4pIH1cbiAgICBjb25zb2xlLmxvZygnQ2xpY2tlZCBib2FyZCBzcGFjZScsIGkpXG4gICAgcmV0dXJuIGlcbn1cblxuYm9hcmRDYW52YXMuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBlID0+IHtcbiAgICBjb25zdCBjbGlja2VkU3BhY2UgPSBnZXRDbGlja2VkU3BhY2UoZSlcbiAgICBpZiAoZ29BZ2Fpbikge1xuICAgICAgICBpZiAodmFsaWRNb3Zlcykge1xuICAgICAgICAgICAgY29uc3QgbW92ZSA9IGFueU1hdGNoKHZhbGlkTW92ZXMsIGUgPT4gaXNJbmRleEVxdWFsKGUuZGVzdCwgY2xpY2tlZFNwYWNlKSlcbiAgICAgICAgICAgIGlmIChtb3ZlKSB7XG4gICAgICAgICAgICAgICAgbWFrZU1vdmUobW92ZSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0gZWxzZSBpZiAoaXNGcmVlKGNsaWNrZWRTcGFjZSkgJiYgc2VsZWN0ZWRTcGFjZSkge1xuICAgICAgICBpZiAodmFsaWRNb3Zlcykge1xuICAgICAgICAgICAgY29uc3QgbW92ZSA9IGFueU1hdGNoKHZhbGlkTW92ZXMsIGUgPT4gaXNJbmRleEVxdWFsKGUuZGVzdCwgY2xpY2tlZFNwYWNlKSlcbiAgICAgICAgICAgIGlmIChtb3ZlKSB7XG4gICAgICAgICAgICAgICAgbWFrZU1vdmUobW92ZSlcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgc2VsZWN0ZWRTcGFjZSA9IG51bGxcbiAgICAgICAgICAgICAgICB2YWxpZE1vdmVzID0gbnVsbFxuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2VsZWN0ZWRTcGFjZSA9IG51bGxcbiAgICAgICAgICAgIHZhbGlkTW92ZXMgPSBudWxsXG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoYW55TWF0Y2goYWxsVmFsaWRNb3Zlcyh0dXJuUGxheWVyKSwgbSA9PiBpc0luZGV4RXF1YWwobS5zcmMsIGNsaWNrZWRTcGFjZSkpKSB7XG4gICAgICAgICAgICBzZWxlY3RlZFNwYWNlID0gY2xpY2tlZFNwYWNlXG4gICAgICAgICAgICB2YWxpZE1vdmVzID0gZ2V0VmFsaWRNb3ZlcyhzZWxlY3RlZFNwYWNlKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2VsZWN0ZWRTcGFjZSA9IG51bGxcbiAgICAgICAgICAgIHZhbGlkTW92ZXMgPSBudWxsXG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc3Qgd2lubmVyID0gY2hlY2tHYW1lT3ZlcigpXG4gICAgZHJhd0JvYXJkKClcbiAgICBpZiAod2lubmVyKSB7XG4gICAgICAgIGNvbnN0IGNvbG9yID0gd2lubmVyID09PSBQbGF5ZXIuTE9DQUwgPyBMT0NBTF9NQU5fQ09MT1IgOiBSRU1PVEVfTUFOX0NPTE9SXG4gICAgICAgIGFsZXJ0KGAke2NvbG9yfSBoYXMgd29uIWApXG4gICAgfVxufSlcblxuZXhwb3J0IGZ1bmN0aW9uIGRyYXdCb2FyZCgpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJvYXJkLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgYm9hcmRbaV0ubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgIGxldCBjdXJyZW50U3BhY2UgPSB7IHJvdzogaSwgY29sOiBqIH1cbiAgICAgICAgICAgIGcuZmlsbFN0eWxlID0gKGkgKyBqKSAlIDIgPyBEQVJLX1NQQUNFX0NPTE9SIDogTElHSFRfU1BBQ0VfQ09MT1JcbiAgICAgICAgICAgIGNvbnN0IHggPSBqICogU0lERV9MRU5cbiAgICAgICAgICAgIGNvbnN0IHkgPSBpICogU0lERV9MRU5cblxuICAgICAgICAgICAgZy5maWxsUmVjdCh4LCB5LCBTSURFX0xFTiwgU0lERV9MRU4pXG4gICAgICAgICAgICBpZiAoaXNSZW1vdGVNYW4oY3VycmVudFNwYWNlKSkge1xuICAgICAgICAgICAgICAgIGRyYXdDaXJjbGUoeCwgeSwgU0lERV9MRU4vMiwgUkVNT1RFX01BTl9DT0xPUilcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNSZW1vdGVLaW5nKGN1cnJlbnRTcGFjZSkpIHtcbiAgICAgICAgICAgICAgICBkcmF3Q2lyY2xlKHgsIHksIFNJREVfTEVOLzIsIFJFTU9URV9LSU5HX0NPTE9SKVxuICAgICAgICAgICAgfSBlbHNlIGlmIChpc0xvY2FsTWFuKGN1cnJlbnRTcGFjZSkpIHtcbiAgICAgICAgICAgICAgICBkcmF3Q2lyY2xlKHgsIHksIFNJREVfTEVOLzIsIExPQ0FMX01BTl9DT0xPUilcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNMb2NhbEtpbmcoY3VycmVudFNwYWNlKSkge1xuICAgICAgICAgICAgICAgIGRyYXdDaXJjbGUoeCwgeSwgU0lERV9MRU4vMiwgTE9DQUxfS0lOR19DT0xPUilcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGFsbFZhbGlkTW92ZXModHVyblBsYXllcikuZm9yRWFjaChtID0+IHtcbiAgICAgICAgaGlnaGxpZ2h0U3BhY2UobS5zcmMsIFBJRUNFX1NFTEVDVElPTl9CT1JERVJfQ09MT1IpXG4gICAgfSlcblxuICAgIGlmIChzZWxlY3RlZFNwYWNlKSB7XG4gICAgICAgIGhpZ2hsaWdodFNwYWNlKHNlbGVjdGVkU3BhY2UsIFBJRUNFX1NFTEVDVElPTl9CT1JERVJfQ09MT1IpXG4gICAgICAgIHZhbGlkTW92ZXM/LmZvckVhY2gobSA9PiB7XG4gICAgICAgICAgICBoaWdobGlnaHRTcGFjZShtLmRlc3QsIEZSRUVfU1BBQ0VfU0VMRUNUSU9OX0JPUkRFUl9DT0xPUilcbiAgICAgICAgfSlcbiAgICB9XG59XG5cbmZ1bmN0aW9uIG1ha2VNb3ZlKG1vdmU6IE1vdmUpIHtcbiAgICBpZiAobW92ZS5qdW1wZWQpIHtcbiAgICAgICAgc2V0KG1vdmUuanVtcGVkLCBTcGFjZS5GUkVFKVxuICAgICAgICBzZXQobW92ZS5kZXN0LCBnZXQobW92ZS5zcmMpKVxuICAgICAgICBzZXQobW92ZS5zcmMsIFNwYWNlLkZSRUUpXG4gICAgICAgIGlmICh0cnlQcm9tb3RlVG9LaW5nKG1vdmUuZGVzdCkpIHtcbiAgICAgICAgICAgIHN3YXBUdXJucygpXG4gICAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuICAgICAgICBzZWxlY3RlZFNwYWNlID0gbW92ZS5kZXN0XG4gICAgICAgIHZhbGlkTW92ZXMgPSBnZXRWYWxpZE1vdmVzKHNlbGVjdGVkU3BhY2UpXG4gICAgICAgIGlmIChhbnlNYXRjaCh2YWxpZE1vdmVzLCBtID0+ICEhbS5qdW1wZWQpKSB7XG4gICAgICAgICAgICBnb0FnYWluID0gdHJ1ZVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc3dhcFR1cm5zKClcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIHNldChtb3ZlLmRlc3QsIGdldChtb3ZlLnNyYykpXG4gICAgICAgIHNldChtb3ZlLnNyYywgU3BhY2UuRlJFRSlcbiAgICAgICAgdHJ5UHJvbW90ZVRvS2luZyhtb3ZlLmRlc3QpXG4gICAgICAgIHN3YXBUdXJucygpXG4gICAgfVxufVxuXG5mdW5jdGlvbiBzd2FwVHVybnMoKSB7XG4gICAgdHVyblBsYXllciA9ICh0dXJuUGxheWVyID09PSBQbGF5ZXIuTE9DQUwgPyBQbGF5ZXIuUkVNT1RFIDogUGxheWVyLkxPQ0FMKVxuICAgIHNlbGVjdGVkU3BhY2UgPSBudWxsXG4gICAgdmFsaWRNb3ZlcyA9IG51bGxcbiAgICBnb0FnYWluID0gZmFsc2Vcbn1cblxuZnVuY3Rpb24gdHJ5UHJvbW90ZVRvS2luZyhpOiBCb2FyZEluZGV4KSB7XG4gICAgaWYgKGlzTG9jYWxQaWVjZShpKSAmJiBpLnJvdyA9PT0gMCAmJiAhaXNMb2NhbEtpbmcoaSkpIHtcbiAgICAgICAgc2V0KGksIFNwYWNlLkxPQ0FMX0tJTkcpXG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgfSBlbHNlIGlmIChpc1JlbW90ZVBpZWNlKGkpICYmIGkucm93ID09PSA3ICYmICFpc1JlbW90ZUtpbmcoaSkpIHtcbiAgICAgICAgc2V0KGksIFNwYWNlLlJFTU9URV9LSU5HKVxuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2Vcbn1cblxuZnVuY3Rpb24gY2hlY2tHYW1lT3ZlcigpIHtcbiAgICBsZXQgbG9jYWxQaWVjZUNvdW50ID0gMFxuICAgIGxldCByZW1vdGVQaWVjZUNvdW50ID0gMFxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYm9hcmQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBib2FyZFswXS5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgY29uc3QgcyA9IHsgcm93OiBpLCBjb2w6IGogfSBhcyBCb2FyZEluZGV4XG4gICAgICAgICAgICBpZiAoaXNMb2NhbFBpZWNlKHMpKSB7XG4gICAgICAgICAgICAgICAgbG9jYWxQaWVjZUNvdW50KytcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNSZW1vdGVQaWVjZShzKSkge1xuICAgICAgICAgICAgICAgIHJlbW90ZVBpZWNlQ291bnQrK1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChsb2NhbFBpZWNlQ291bnQgPT09IDAgfHwgYWxsVmFsaWRNb3ZlcyhQbGF5ZXIuTE9DQUwpLnNpemUgPT09IDApIHtcbiAgICAgICAgcmV0dXJuIFBsYXllci5SRU1PVEVcbiAgICB9IGVsc2UgaWYgKHJlbW90ZVBpZWNlQ291bnQgPT09IDAgfHwgYWxsVmFsaWRNb3ZlcyhQbGF5ZXIuUkVNT1RFKS5zaXplID09PSAwKSB7XG4gICAgICAgIHJldHVybiBQbGF5ZXIuTE9DQUxcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGlzU3BhY2VJbnNpZGVCb2FyZChpOiBCb2FyZEluZGV4KSB7XG4gICAgcmV0dXJuIGkucm93ID49IDAgJiYgaS5yb3cgPCA4ICYmIGkuY29sID49IDAgJiYgaS5jb2wgPCA4XG59XG5cbi8qKiBQcmVjb25kaXRpb246IGkgY29udGFpbnMgYSBsb2NhbCBtYW4gKi9cbmZ1bmN0aW9uIHZhbGlkTW92ZXNGb3JMb2NhbE1hbihpOiBCb2FyZEluZGV4KSB7XG4gICAgaWYgKCFpc0xvY2FsTWFuKGkpKSB0aHJvdyAnSWxsZWdhbCBzdGF0ZTogaW5kZXggbXVzdCBjb250YWluIGxvY2FsIG1hbidcbiAgICBjb25zdCBtb3ZlcyA9IG5ldyBTZXQ8TW92ZT4oKVxuICAgIGNvbnN0IGxlZnQ6IEJvYXJkSW5kZXggPSB7IHJvdzogaS5yb3ctMSwgY29sOiBpLmNvbC0xIH1cbiAgICBjb25zdCBsZWZ0MjogQm9hcmRJbmRleCA9IHsgcm93OiBpLnJvdy0yLCBjb2w6IGkuY29sLTIgfVxuICAgIGNvbnN0IHJpZ2h0OiBCb2FyZEluZGV4ID0geyByb3c6IGkucm93LTEsIGNvbDogaS5jb2wrMSB9XG4gICAgY29uc3QgcmlnaHQyOiBCb2FyZEluZGV4ID0geyByb3c6IGkucm93LTIsIGNvbDogaS5jb2wrMiB9XG4gICAgaWYgKGlzRnJlZShsZWZ0KSkgbW92ZXMuYWRkKHtzcmM6IGksIGRlc3Q6IGxlZnR9KVxuICAgIGlmIChpc0ZyZWUocmlnaHQpKSBtb3Zlcy5hZGQoe3NyYzogaSwgZGVzdDogcmlnaHR9KVxuICAgIGlmIChpc1JlbW90ZVBpZWNlKGxlZnQpICYmIGlzRnJlZShsZWZ0MikpIG1vdmVzLmFkZCh7c3JjOiBpLCBkZXN0OiBsZWZ0MiwganVtcGVkOiBsZWZ0fSlcbiAgICBpZiAoaXNSZW1vdGVQaWVjZShyaWdodCkgJiYgaXNGcmVlKHJpZ2h0MikpIG1vdmVzLmFkZCh7c3JjOiBpLCBkZXN0OiByaWdodDIsIGp1bXBlZDogcmlnaHR9KVxuICAgIHJldHVybiBtb3Zlc1xufVxuXG4vKiogUHJlY29uZGl0aW9uOiBpIGNvbnRhaW5zIGEgbG9jYWwga2luZyAqL1xuZnVuY3Rpb24gdmFsaWRNb3Zlc0ZvckxvY2FsS2luZyhpOiBCb2FyZEluZGV4KSB7XG4gICAgaWYgKCFpc0xvY2FsS2luZyhpKSkgdGhyb3cgJ0lsbGVnYWwgc3RhdGU6IGluZGV4IG11c3QgY29udGFpbiBsb2NhbCBraW5nJ1xuICAgIGNvbnN0IG1vdmVzID0gbmV3IFNldDxNb3ZlPigpXG4gICAgY29uc3QgdG9wbGVmdDogQm9hcmRJbmRleCA9IHsgcm93OiBpLnJvdy0xLCBjb2w6IGkuY29sLTEgfVxuICAgIGNvbnN0IHRvcGxlZnQyOiBCb2FyZEluZGV4ID0geyByb3c6IGkucm93LTIsIGNvbDogaS5jb2wtMiB9XG4gICAgY29uc3QgdG9wcmlnaHQ6IEJvYXJkSW5kZXggPSB7IHJvdzogaS5yb3ctMSwgY29sOiBpLmNvbCsxIH1cbiAgICBjb25zdCB0b3ByaWdodDI6IEJvYXJkSW5kZXggPSB7IHJvdzogaS5yb3ctMiwgY29sOiBpLmNvbCsyIH1cbiAgICBjb25zdCBib3R0b21sZWZ0OiBCb2FyZEluZGV4ID0geyByb3c6IGkucm93KzEsIGNvbDogaS5jb2wtMSB9XG4gICAgY29uc3QgYm90dG9tbGVmdDI6IEJvYXJkSW5kZXggPSB7IHJvdzogaS5yb3crMiwgY29sOiBpLmNvbC0yIH1cbiAgICBjb25zdCBib3R0b21yaWdodDogQm9hcmRJbmRleCA9IHsgcm93OiBpLnJvdysxLCBjb2w6IGkuY29sKzEgfVxuICAgIGNvbnN0IGJvdHRvbXJpZ2h0MjogQm9hcmRJbmRleCA9IHsgcm93OiBpLnJvdysyLCBjb2w6IGkuY29sKzIgfVxuICAgIGlmIChpc0ZyZWUodG9wbGVmdCkpIG1vdmVzLmFkZCh7c3JjOiBpLCBkZXN0OiB0b3BsZWZ0fSlcbiAgICBpZiAoaXNGcmVlKHRvcHJpZ2h0KSkgbW92ZXMuYWRkKHtzcmM6IGksIGRlc3Q6IHRvcHJpZ2h0fSlcbiAgICBpZiAoaXNGcmVlKGJvdHRvbWxlZnQpKSBtb3Zlcy5hZGQoe3NyYzogaSwgZGVzdDogYm90dG9tbGVmdH0pXG4gICAgaWYgKGlzRnJlZShib3R0b21yaWdodCkpIG1vdmVzLmFkZCh7c3JjOiBpLCBkZXN0OiBib3R0b21yaWdodH0pXG4gICAgaWYgKGlzUmVtb3RlUGllY2UodG9wbGVmdCkgJiYgaXNGcmVlKHRvcGxlZnQyKSkgbW92ZXMuYWRkKHtzcmM6IGksIGRlc3Q6IHRvcGxlZnQyLCBqdW1wZWQ6IHRvcGxlZnR9KVxuICAgIGlmIChpc1JlbW90ZVBpZWNlKHRvcHJpZ2h0KSAmJiBpc0ZyZWUodG9wcmlnaHQyKSkgbW92ZXMuYWRkKHtzcmM6IGksIGRlc3Q6IHRvcHJpZ2h0MiwganVtcGVkOiB0b3ByaWdodH0pXG4gICAgaWYgKGlzUmVtb3RlUGllY2UoYm90dG9tbGVmdCkgJiYgaXNGcmVlKGJvdHRvbWxlZnQyKSkgbW92ZXMuYWRkKHtzcmM6IGksIGRlc3Q6IGJvdHRvbWxlZnQyLCBqdW1wZWQ6IGJvdHRvbWxlZnR9KVxuICAgIGlmIChpc1JlbW90ZVBpZWNlKGJvdHRvbXJpZ2h0KSAmJiBpc0ZyZWUoYm90dG9tcmlnaHQyKSkgbW92ZXMuYWRkKHtzcmM6IGksIGRlc3Q6IGJvdHRvbXJpZ2h0MiwganVtcGVkOiBib3R0b21yaWdodH0pXG4gICAgcmV0dXJuIG1vdmVzXG59XG5cbi8qKiBQcmVjb25kaXRpb246IGkgY29udGFpbnMgYSByZW1vdGUgbWFuICovXG5mdW5jdGlvbiB2YWxpZE1vdmVzRm9yUmVtb3RlTWFuKGk6IEJvYXJkSW5kZXgpIHtcbiAgICBpZiAoIWlzUmVtb3RlTWFuKGkpKSB0aHJvdyAnSWxsZWdhbCBzdGF0ZTogaW5kZXggbXVzdCBjb250YWluIHJlbW90ZSBtYW4nXG4gICAgY29uc3QgbW92ZXMgPSBuZXcgU2V0PE1vdmU+KClcbiAgICBjb25zdCBsZWZ0OiBCb2FyZEluZGV4ID0geyByb3c6IGkucm93KzEsIGNvbDogaS5jb2wtMSB9XG4gICAgY29uc3QgbGVmdDI6IEJvYXJkSW5kZXggPSB7IHJvdzogaS5yb3crMiwgY29sOiBpLmNvbC0yIH1cbiAgICBjb25zdCByaWdodDogQm9hcmRJbmRleCA9IHsgcm93OiBpLnJvdysxLCBjb2w6IGkuY29sKzEgfVxuICAgIGNvbnN0IHJpZ2h0MjogQm9hcmRJbmRleCA9IHsgcm93OiBpLnJvdysyLCBjb2w6IGkuY29sKzIgfVxuICAgIGlmIChpc0ZyZWUobGVmdCkpIG1vdmVzLmFkZCh7c3JjOiBpLCBkZXN0OiBsZWZ0fSlcbiAgICBpZiAoaXNGcmVlKHJpZ2h0KSkgbW92ZXMuYWRkKHtzcmM6IGksIGRlc3Q6IHJpZ2h0fSlcbiAgICBpZiAoaXNMb2NhbFBpZWNlKGxlZnQpICYmIGlzRnJlZShsZWZ0MikpIG1vdmVzLmFkZCh7c3JjOiBpLCBkZXN0OiBsZWZ0MiwganVtcGVkOiBsZWZ0fSlcbiAgICBpZiAoaXNMb2NhbFBpZWNlKHJpZ2h0KSAmJiBpc0ZyZWUocmlnaHQyKSkgbW92ZXMuYWRkKHtzcmM6IGksIGRlc3Q6IHJpZ2h0MiwganVtcGVkOiByaWdodH0pXG4gICAgcmV0dXJuIG1vdmVzXG59XG5cbi8qKiBQcmVjb25kaXRpb246IGkgY29udGFpbnMgYSByZW1vdGUga2luZyAqL1xuZnVuY3Rpb24gdmFsaWRNb3Zlc0ZvclJlbW90ZUtpbmcoaTogQm9hcmRJbmRleCkge1xuICAgIGlmICghaXNSZW1vdGVLaW5nKGkpKSB0aHJvdyAnSWxsZWdhbCBzdGF0ZTogaW5kZXggbXVzdCBjb250YWluIHJlbW90ZSBraW5nJ1xuICAgIGNvbnN0IG1vdmVzID0gbmV3IFNldDxNb3ZlPigpXG4gICAgY29uc3QgdG9wbGVmdDogQm9hcmRJbmRleCA9IHsgcm93OiBpLnJvdy0xLCBjb2w6IGkuY29sLTEgfVxuICAgIGNvbnN0IHRvcGxlZnQyOiBCb2FyZEluZGV4ID0geyByb3c6IGkucm93LTIsIGNvbDogaS5jb2wtMiB9XG4gICAgY29uc3QgdG9wcmlnaHQ6IEJvYXJkSW5kZXggPSB7IHJvdzogaS5yb3ctMSwgY29sOiBpLmNvbCsxIH1cbiAgICBjb25zdCB0b3ByaWdodDI6IEJvYXJkSW5kZXggPSB7IHJvdzogaS5yb3ctMiwgY29sOiBpLmNvbCsyIH1cbiAgICBjb25zdCBib3R0b21sZWZ0OiBCb2FyZEluZGV4ID0geyByb3c6IGkucm93KzEsIGNvbDogaS5jb2wtMSB9XG4gICAgY29uc3QgYm90dG9tbGVmdDI6IEJvYXJkSW5kZXggPSB7IHJvdzogaS5yb3crMiwgY29sOiBpLmNvbC0yIH1cbiAgICBjb25zdCBib3R0b21yaWdodDogQm9hcmRJbmRleCA9IHsgcm93OiBpLnJvdysxLCBjb2w6IGkuY29sKzEgfVxuICAgIGNvbnN0IGJvdHRvbXJpZ2h0MjogQm9hcmRJbmRleCA9IHsgcm93OiBpLnJvdysyLCBjb2w6IGkuY29sKzIgfVxuICAgIGlmIChpc0ZyZWUodG9wbGVmdCkpIG1vdmVzLmFkZCh7c3JjOiBpLCBkZXN0OiB0b3BsZWZ0fSlcbiAgICBpZiAoaXNGcmVlKHRvcHJpZ2h0KSkgbW92ZXMuYWRkKHtzcmM6IGksIGRlc3Q6IHRvcHJpZ2h0fSlcbiAgICBpZiAoaXNGcmVlKGJvdHRvbWxlZnQpKSBtb3Zlcy5hZGQoe3NyYzogaSwgZGVzdDogYm90dG9tbGVmdH0pXG4gICAgaWYgKGlzRnJlZShib3R0b21yaWdodCkpIG1vdmVzLmFkZCh7c3JjOiBpLCBkZXN0OiBib3R0b21yaWdodH0pXG4gICAgaWYgKGlzTG9jYWxQaWVjZSh0b3BsZWZ0KSAmJiBpc0ZyZWUodG9wbGVmdDIpKSBtb3Zlcy5hZGQoe3NyYzogaSwgZGVzdDogdG9wbGVmdDIsIGp1bXBlZDogdG9wbGVmdH0pXG4gICAgaWYgKGlzTG9jYWxQaWVjZSh0b3ByaWdodCkgJiYgaXNGcmVlKHRvcHJpZ2h0MikpIG1vdmVzLmFkZCh7c3JjOiBpLCBkZXN0OiB0b3ByaWdodDIsIGp1bXBlZDogdG9wcmlnaHR9KVxuICAgIGlmIChpc0xvY2FsUGllY2UoYm90dG9tbGVmdCkgJiYgaXNGcmVlKGJvdHRvbWxlZnQyKSkgbW92ZXMuYWRkKHtzcmM6IGksIGRlc3Q6IGJvdHRvbWxlZnQyLCBqdW1wZWQ6IGJvdHRvbWxlZnR9KVxuICAgIGlmIChpc0xvY2FsUGllY2UoYm90dG9tcmlnaHQpICYmIGlzRnJlZShib3R0b21yaWdodDIpKSBtb3Zlcy5hZGQoe3NyYzogaSwgZGVzdDogYm90dG9tcmlnaHQyLCBqdW1wZWQ6IGJvdHRvbXJpZ2h0fSlcbiAgICByZXR1cm4gbW92ZXNcbn1cblxuZnVuY3Rpb24gZ2V0VmFsaWRNb3ZlcyhpOiBCb2FyZEluZGV4KSB7XG4gICAgaWYgKCFpc1NwYWNlSW5zaWRlQm9hcmQoaSkpIHRocm93ICdJbmRleCBvdXQgb2YgYm91bmRzJ1xuICAgIGxldCBtb3ZlczogU2V0PE1vdmU+XG4gICAgc3dpdGNoIChib2FyZFtpLnJvd11baS5jb2xdKSB7XG4gICAgICAgIGNhc2UgU3BhY2UuTE9DQUxfTUFOOlxuICAgICAgICAgICAgbW92ZXMgPSB2YWxpZE1vdmVzRm9yTG9jYWxNYW4oaSlcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFNwYWNlLkxPQ0FMX0tJTkc6XG4gICAgICAgICAgICBtb3ZlcyA9IHZhbGlkTW92ZXNGb3JMb2NhbEtpbmcoaSlcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFNwYWNlLlJFTU9URV9NQU46XG4gICAgICAgICAgICBtb3ZlcyA9IHZhbGlkTW92ZXNGb3JSZW1vdGVNYW4oaSlcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFNwYWNlLlJFTU9URV9LSU5HOlxuICAgICAgICAgICAgbW92ZXMgPSB2YWxpZE1vdmVzRm9yUmVtb3RlS2luZyhpKVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gbmV3IFNldDxNb3ZlPigpICAvLyBObyB2YWxpZCBtb3ZlcyBmb3IgYW4gZW1wdHkgc3BhY2VcbiAgICB9XG4gICAgLy8gSWYgYSBwaWVjZSBoYXMganVtcCBtb3ZlcywgdGhlbiB0aG9zZSBhcmUgdGhlIG9ubHkgdmFsaWQgbW92ZXNcbiAgICBjb25zdCBqdW1wTW92ZXMgPSBuZXcgU2V0PE1vdmU+KClcbiAgICBtb3Zlcy5mb3JFYWNoKG0gPT4ge1xuICAgICAgICBpZiAobS5qdW1wZWQpIHtcbiAgICAgICAgICAgIGp1bXBNb3Zlcy5hZGQobSlcbiAgICAgICAgfVxuICAgIH0pXG4gICAgcmV0dXJuIGp1bXBNb3Zlcy5zaXplID4gMCA/IGp1bXBNb3ZlcyA6IG1vdmVzXG59XG5cbi8qKiBSZXR1cm4gYSBTZXQgb2YgYWxsIHZhbGlkIG1vdmVzIGZvciBwbGF5ZXIuICovXG5mdW5jdGlvbiBhbGxWYWxpZE1vdmVzKHA6IFBsYXllcikge1xuICAgIGNvbnN0IGFsbFZhbGlkTW92ZVNldHMgPSBuZXcgU2V0PFNldDxNb3ZlPj4oKVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYm9hcmQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBib2FyZFswXS5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgY29uc3QgcyA9IHsgcm93OiBpLCBjb2w6IGogfSBhcyBCb2FyZEluZGV4XG4gICAgICAgICAgICBpZiAocCA9PT0gUGxheWVyLkxPQ0FMICYmIGlzTG9jYWxQaWVjZShzKSB8fCBwID09PSBQbGF5ZXIuUkVNT1RFICYmIGlzUmVtb3RlUGllY2UocykpIHtcbiAgICAgICAgICAgICAgICBhbGxWYWxpZE1vdmVTZXRzLmFkZChnZXRWYWxpZE1vdmVzKHMpKVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGNvbnN0IGFsbEp1bXBNb3ZlcyA9IG5ldyBTZXQ8TW92ZT4oKVxuICAgIGNvbnN0IGFsbE5vbkp1bXBNb3ZlcyA9IG5ldyBTZXQ8TW92ZT4oKVxuICAgIGFsbFZhbGlkTW92ZVNldHMuZm9yRWFjaChtb3ZlU2V0ID0+IHtcbiAgICAgICAgbW92ZVNldC5mb3JFYWNoKG1vdmUgPT4ge1xuICAgICAgICAgICAgaWYgKG1vdmUuanVtcGVkKSB7XG4gICAgICAgICAgICAgICAgYWxsSnVtcE1vdmVzLmFkZChtb3ZlKVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBhbGxOb25KdW1wTW92ZXMuYWRkKG1vdmUpXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgfSlcbiAgICAvLyBJZiB0aGVyZSBhcmUganVtcCBtb3ZlcywgdGhvc2UgYXJlIHRoZSBvbmx5IHZhbGlkIG1vdmVzXG4gICAgaWYgKGFsbEp1bXBNb3Zlcy5zaXplID4gMCkge1xuICAgICAgICByZXR1cm4gYWxsSnVtcE1vdmVzXG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGFsbE5vbkp1bXBNb3Zlc1xuICAgIH1cbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///653\n")},607:(__unused_webpack_module,exports,__webpack_require__)=>{eval("var __webpack_unused_export__;\n\n/*\n * index.ts\n *\n * Entry point for the application.\n */\n__webpack_unused_export__ = ({ value: true });\nconst gameboard_1 = __webpack_require__(653);\ngameboard_1.drawBoard();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaGVja2Vycy1jbGllbnQvLi9zcmMvaW5kZXgudHM/ZmZiNCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBOzs7O0dBSUc7O0FBRUgsNkNBQXVDO0FBRXZDLHFCQUFTLEVBQUUiLCJmaWxlIjoiNjA3LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIGluZGV4LnRzXG4gKlxuICogRW50cnkgcG9pbnQgZm9yIHRoZSBhcHBsaWNhdGlvbi5cbiAqL1xuXG5pbXBvcnQgeyBkcmF3Qm9hcmQgfSBmcm9tICcuL2dhbWVib2FyZCdcblxuZHJhd0JvYXJkKClcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///607\n")},882:(__unused_webpack_module,exports)=>{eval('\n/*\n * util.ts\n *\n * Module for misc. utility functions.\n */\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.anyMatch = exports.sleep = void 0;\nfunction sleep(ms) {\n    return new Promise(r => setTimeout(r, ms));\n}\nexports.sleep = sleep;\n/** Checks if any Item in s matches. Then return the element in the set that matched.\n * Returns null if there are no matches.\n */\nfunction anyMatch(s, matchFunc) {\n    for (const e of s) {\n        if (matchFunc(e)) {\n            return e;\n        }\n    }\n    return null;\n}\nexports.anyMatch = anyMatch;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaGVja2Vycy1jbGllbnQvLi9zcmMvdXRpbC50cz8xOGRmIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7OztHQUlHOzs7QUFFSCxTQUFnQixLQUFLLENBQUMsRUFBVTtJQUM1QixPQUFPLElBQUksT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUM5QyxDQUFDO0FBRkQsc0JBRUM7QUFFRDs7R0FFRztBQUNILFNBQWdCLFFBQVEsQ0FBSSxDQUFTLEVBQUUsU0FBNEI7SUFDL0QsS0FBSyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUU7UUFDZixJQUFJLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRTtZQUNkLE9BQU8sQ0FBQztTQUNYO0tBQ0o7SUFDRCxPQUFPLElBQUk7QUFDZixDQUFDO0FBUEQsNEJBT0MiLCJmaWxlIjoiODgyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIHV0aWwudHNcbiAqXG4gKiBNb2R1bGUgZm9yIG1pc2MuIHV0aWxpdHkgZnVuY3Rpb25zLlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBzbGVlcChtczogbnVtYmVyKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKHIgPT4gc2V0VGltZW91dChyLCBtcykpXG59XG5cbi8qKiBDaGVja3MgaWYgYW55IEl0ZW0gaW4gcyBtYXRjaGVzLiBUaGVuIHJldHVybiB0aGUgZWxlbWVudCBpbiB0aGUgc2V0IHRoYXQgbWF0Y2hlZC5cbiAqIFJldHVybnMgbnVsbCBpZiB0aGVyZSBhcmUgbm8gbWF0Y2hlcy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFueU1hdGNoPFQ+KHM6IFNldDxUPiwgbWF0Y2hGdW5jOiAoZTogVCkgPT4gYm9vbGVhbikge1xuICAgIGZvciAoY29uc3QgZSBvZiBzKSB7XG4gICAgICAgIGlmIChtYXRjaEZ1bmMoZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBlXG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGxcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///882\n')}},__webpack_module_cache__={};function __webpack_require__(Q){if(__webpack_module_cache__[Q])return __webpack_module_cache__[Q].exports;var U=__webpack_module_cache__[Q]={exports:{}};return __webpack_modules__[Q](U,U.exports,__webpack_require__),U.exports}__webpack_require__(607)})();